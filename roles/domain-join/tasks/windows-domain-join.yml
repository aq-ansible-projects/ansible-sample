---
- name: Change machine hostname
  win_hostname:
    name: '{{ tags.name }}'
  register: hostname_change

- name: Reboot machine if required
  win_reboot:
    post_reboot_delay: 60
    reboot_timeout: 600
  when: hostname_change.reboot_required

- name: Get Adapter name
  win_shell: |
    $net_adapter_name = (Get-NetAdapter -Physical | Where-Object { $_.Name -like "Ethernet*" } | Where-Object { ($_.InterfaceDescription -like "*Hyper-V*") -or ($_.InterfaceDescription -like "*Amazon*") } | select Name)[0].Name
  register: win_dns_client_adapter_names
  changed_when: false
  ignore_errors: yes

- name: Debug adapter name
  debug:
    var: win_dns_client_adapter_names.stdout_lines[0]

- name: Update  DNS to point to PDC and SDC IP
  win_dns_client:
    adapter_names: '{{ win_dns_client_adapter_names.stdout_lines[0] }}'
    dns_servers:
      - "{{ hostvars[groups['tag_name_dc_1'][0]]['pdc_ip'] }}"
      - "{{ hostvars[groups['tag_name_dc_2'][0]]['sdc_ip'] }}"

- name: Network configuration
  win_shell: |
    $net_adapter_name =  "{{ win_dns_client_adapter_names.stdout_lines[0] }}"
    $is_dhcp = ((Get-NetIPAddress -AddressFamily 'IPv4' -InterfaceAlias $net_adapter_name).PrefixOrigin) -eq 'Dhcp'
    if ($is_dhcp) {
      $current_ip = (Get-NetIPAddress -AddressFamily 'IPv4' -InterfaceAlias $net_adapter_name).IPAddress
      $prefix_length = (Get-NetIPAddress -AddressFamily 'IPv4' -InterfaceAlias $net_adapter_name).PrefixLength
      $gateway = (Get-NetRoute -AddressFamily 'IPv4' -InterfaceAlias $net_adapter_name -DestinationPrefix "0.0.0.0/0").NextHop
      Remove-NetIPAddress -IPAddress $current_ip -Confirm:$False
      New-NetIPAddress -InterfaceAlias $ENI_Name -IPAddress $ip -PrefixLength $prefix_length -DefaultGateway $gateway -Confirm:$False
    }
  register: ip_change

- name: Reboot machine if required
  win_reboot:
    post_reboot_delay: 60
    reboot_timeout: 600
  when: ip_change.reboot_required

- name: Join machine to domain
  win_domain_controller:
    dns_domain_name: '{{ domain_name }}'
    domain_admin_user: '{{ domain_name }}\{{ domain_admin_user }}'
    domain_admin_password: '{{ domain_admin_password }}'
    state: domain
  register: domain_join

- name: Reboot machine if required
  win_reboot:
    post_reboot_delay: 60
    reboot_timeout: 600
  when: domain_join.reboot_required